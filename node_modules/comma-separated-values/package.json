{
  "_args": [
    [
      "comma-separated-values",
      "G:\\Users\\Suica"
    ]
  ],
  "_from": "comma-separated-values@*",
  "_id": "comma-separated-values@3.6.2",
  "_inCache": true,
  "_location": "/comma-separated-values",
  "_nodeVersion": "2.0.1",
  "_npmUser": {
    "email": "hi@knrz.co",
    "name": "knrz"
  },
  "_npmVersion": "2.9.1",
  "_phantomChildren": {},
  "_requested": {
    "name": "comma-separated-values",
    "raw": "comma-separated-values",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/comma-separated-values/-/comma-separated-values-3.6.2.tgz",
  "_shasum": "0fe33471a09e9b2fe05016fa38fbef06eef1f195",
  "_shrinkwrap": null,
  "_spec": "comma-separated-values",
  "_where": "G:\\Users\\Suica",
  "author": {
    "email": "hi@knrz.co",
    "name": "=",
    "url": "http://knrz.co/"
  },
  "bugs": {
    "url": "https://github.com/knrz/CSV.js/issues"
  },
  "dependencies": {},
  "description": "Simple, blazing-fast CSV parsing/encoding in JavaScript. Full RFC 4180 compliance.",
  "devDependencies": {
    "benchmark": "~1.0.0",
    "mocha": "~1.20.1"
  },
  "directories": {},
  "dist": {
    "shasum": "0fe33471a09e9b2fe05016fa38fbef06eef1f195",
    "tarball": "http://registry.npmjs.org/comma-separated-values/-/comma-separated-values-3.6.2.tgz"
  },
  "gitHead": "417368d3582cf7970932547e1339be8cd9479fa6",
  "homepage": "https://github.com/knrz/CSV.js",
  "installable": true,
  "keywords": [
    "csv",
    "csv encode",
    "csv parse",
    "csv rfc",
    "tsv",
    "tsv encode",
    "tsv parse",
    "tsv rfc"
  ],
  "license": "MIT",
  "main": "csv.js",
  "maintainers": [
    {
      "email": "hi@knrz.co",
      "name": "knrz"
    }
  ],
  "name": "comma-separated-values",
  "optionalDependencies": {},
  "readme": "CSV.js\r\n======\r\n\r\nSimple, blazing-fast CSV parsing/encoding in JavaScript. Full [RFC 4180](http://tools.ietf.org/html/rfc4180) compliance.\r\n\r\nCompatible with browsers (>IE8), AMD, and NodeJS.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nDownload `csv.min.js` and reference to it using your preferred method.\r\n\r\nIf you use **Bower**, or **npm**, install the `comma-separated-values` package.\r\n\r\n\r\nInstantiation\r\n-------------\r\n\r\nCreate a CSV instance with `var csv = new CSV(data);`, where `data` is a plain-text CSV string. You can supply options with the format `var csv = new CSV(data, { option: value });`.\r\n\r\n\r\nOptions\r\n-------\r\n\r\n- **`cast`**: `true` to automatically cast numbers and booleans to their JavaScript equivalents. `false` otherwise. Supply your own `array` to override autocasting. Defaults to `true`.\r\n- **`lineDelimiter`**: The `string` that separates lines from one another. If parsing, defaults to autodetection. If encoding, defaults to `'\\r\\n'`.\r\n- **`cellDelimiter`**: A 1-character-long `string` that separates values from one another. If parsing, defaults to autodetection. If encoding, defaults to `','`.\r\n- **`header`**: `true` if the first row of the CSV contains header values, or supply your own `array`. Defaults to `false`.\r\n\r\nYou can update an option's value any time after instantiation with `csv.set(option, value)`.\r\n\r\n\r\nQuickstart\r\n----------\r\n\r\nFor those accustomed to JavaScript, the CSV.js API:\r\n\r\n```javascript\r\n// The instance will set itself up for parsing or encoding on instantiation,\r\n// which means that each instance can only either parse or encode.\r\n// The `options` object is optional\r\nvar csv = new CSV(data, [options]);\r\n\r\n// If the data you've supplied is an array,\r\n// CSV#encode will return the encoded CSV.\r\n// It will otherwise fail silently.\r\nvar encoded = csv.encode();\r\n\r\n// If the data you've suopplied is a string,\r\n// CSV#parse will return the parsed CSV.\r\n// It will otherwise fail silently.\r\nvar parsed = csv.parse();\r\n\r\n// The CSV instance can return the record immediately after\r\n// it's been encoded or parsed to prevent storing the results\r\n// in a large array by calling CSV#forEach and passing in a function.\r\ncsv.forEach(function(record) {\r\n  // do something with the record\r\n});\r\n\r\n// CSV includes some convenience class methods:\r\nCSV.parse(data, options); // identical to `new CSV(data, options).parse()`\r\nCSV.encode(data, options); // identical to `new CSV(data, options).encode()`\r\nCSV.forEach(data, options, callback); // identical to `new CSV(data, options).forEach(callback)`\r\n\r\n// For overriding automatic casting, set `options.cast` to an array.\r\n// For `parsing`, valid array values are: 'Number', 'Boolean', and 'String'.\r\nCSV.parse(data, { cast: ['String', 'Number', 'Number', 'Boolean'] });\r\n// For `encoding`, valid array values are 'Array', 'Object', 'String', 'Null', and 'Primitive'.\r\nCSV.encode(data, { cast: ['Primitive', 'Primitive', 'String'] });\r\n```\r\n\r\n\r\nParsing\r\n-------\r\n\r\nBy default CSV.js will return an `array of arrays`.\r\n\r\n```javascript\r\nvar data = '\\\r\n1850,20,0,1,1017281\\r\\n\\\r\n1850,20,0,2,1003841\\r\\n\\\r\n...\r\n';\r\nnew CSV(data).parse()\r\n/*\r\nReturns:\r\n[\r\n  [1850, 20, 0, 1, 1017281],\r\n  [1850, 20, 0, 2, 1003841]\r\n  ...\r\n]\r\n*/\r\n```\r\n\r\n\r\nIf the CSV's first row is a header, set `header` to `true`, and CSV.js will return an `array of objects`.\r\n\r\n```javascript\r\nvar data = '\\\r\nyear,age,status,sex,population\\r\\n\\\r\n1850,20,0,1,1017281\\r\\n\\\r\n1850,20,0,2,1003841\\r\\n\\\r\n...\r\n';\r\nnew CSV(data, { header: true }).parse();\r\n/*\r\nReturns:\r\n[\r\n  { year: 1850, age: 20, status: 0, sex: 1, population: 1017281 },\r\n  { year: 1850, age: 20, status: 0, sex: 2, population: 1003841 }\r\n  ...\r\n]\r\n*/\r\n```\r\n\r\n\r\nYou may also supply your own header values, if the text does not contain them, by setting `header` to an `array` of field values.\r\n\r\n```javascript\r\nvar data = '\\\r\n1850,20,0,1,1017281\\r\\n\\\r\n1850,20,0,2,1003841\\r\\n\\\r\n...\r\n';\r\nnew CSV(data, {\r\n  header: ['year', 'age', 'status', 'sex', 'population']\r\n}).parse();\r\n/*\r\nReturns:\r\n[\r\n  { year: 1850, age: 20, status: 0, sex: 1, population: 1017281 },\r\n  { year: 1850, age: 20, status: 0, sex: 2, population: 1003841 }\r\n  ...\r\n]\r\n*/\r\n```\r\n\r\n\r\nEncoding\r\n--------\r\n\r\nCSV.js accepts an `array of arrays` or an `array of objects`.\r\n\r\n```javascript\r\nvar data = [[1850, 20, 0, 1, 1017281], [1850, 20, 0, 2, 1003841]...];\r\nnew CSV(data).encode();\r\n/*\r\nReturns:\r\n1850,20,0,1,1017281\\r\\n\\\r\n1850,20,0,2,1003841\\r\\n\\\r\n...\r\n*/\r\n```\r\n\r\n\r\nTo add headers to an `array of arrays`, set `header` to an `array` of header field values.\r\n\r\n```javascript\r\nvar data = [[1850, 20, 0, 1, 1017281], [1850, 20, 0, 2, 1003841]];\r\nnew CSV(data, { header: [\"year\", \"age\", \"status\", \"sex\", \"population\"] }).encode();\r\n/*\r\nReturns:\r\n\"year\",\"age\",\"status\",\"sex\",\"population\"\\r\\n\\\r\n1850,20,0,1,1017281\\r\\n\\\r\n1850,20,0,2,1003841\\r\\n\\\r\n*/\r\n```\r\n\r\n\r\nTo add headers to an `array of objects`, just set `header` to `true`.\r\n\r\n```javascript\r\nvar data = [\r\n  { year: 1850, age: 20, status: 0, sex: 1, population: 1017281 },\r\n  { year: 1850, age: 20, status: 0, sex: 2, population: 1003841 }\r\n];\r\nnew CSV(data, { header: true }).encode();\r\n/*\r\nReturns:\r\n\"year\",\"age\",\"status\",\"sex\",\"population\"\\r\\n\\\r\n1850,20,0,1,1017281\\r\\n\\\r\n1850,20,0,2,1003841\\r\\n\\\r\n*/\r\n```\r\n\r\n\r\nStreaming\r\n---------\r\n\r\nIf the dataset that you've provided is to be parsed, calling `CSV.prototype.forEach` and supplying a function will call your function and supply it with the parsed record immediately after it's been parsed.\r\n\r\n```javascript\r\nvar data = '\\\r\n1850,20,0,1,1017281\\r\\n\\\r\n1850,20,0,2,1003841\\r\\n\\\r\n...\r\n';\r\nnew CSV(data).forEach(function(array) {\r\n  /*\r\n   * do something with the incoming array\r\n   * array example:\r\n   *   [1850, 20, 0, 1, 1017281]\r\n   */\r\n});\r\n```\r\n\r\nLikewise, if you've requested an `array of objects`, you can still call `CSV.prototype.forEach`:\r\n\r\n```javascript\r\nvar data = '\\\r\nyear,age,status,sex,population\\r\\n\\\r\n1850,20,0,1,1017281\\r\\n\\\r\n1850,20,0,2,1003841\\r\\n\\\r\n...\r\n';\r\nnew CSV(data, { header: true }).forEach(function(object) {\r\n  /*\r\n   * do something with the incoming object\r\n   * object example:\r\n   *   { year: 1850, age: 20, status: 0, sex: 1, population: 1017281 }\r\n   */\r\n});\r\n```\r\n\r\n\r\nIf you're dataset is to be encoded, `CSV.prototype.forEach` will call your function and supply the CSV-encoded line immediately after the line has been encoded:\r\n\r\n```javascript\r\nvar data = [[1850, 20, 0, 1, 1017281], [1850, 20, 0, 2, 1003841]];\r\nnew CSV(data).forEach(function(line) {\r\n  /*\r\n   * do something with the incoming line\r\n   * line example:\r\n   *   \"1850,20,0,1,1017281\\r\\n\\\"\"\r\n   */\r\n});\r\n```\r\n\r\nCasting\r\n-------\r\n\r\n```javascript\r\n// For overriding automatic casting, set `options.cast` to an array.\r\n// For `parsing`, valid array values are: 'Number', 'Boolean', and 'String'.\r\nCSV.parse(data, { cast: ['String', 'Number', 'Number', 'Boolean'] });\r\n// For `encoding`, valid array values are 'Array', 'Object', 'String', 'Null', and 'Primitive'.\r\nCSV.encode(data, { cast: ['Primitive', 'Primitive', 'String'] });\r\n```\r\n\r\n\r\nConvenience Methods\r\n-------------------\r\n\r\n```javascript\r\nCSV.parse(data, options) // identical to `new CSV(data, options).parse()`\r\nCSV.encode(data, options) // identical to `new CSV(data, options).encode()`\r\nCSV.forEach(data, options, callback) // identical to `new CSV(data, options).forEach(callback)`\r\n```\r\n\r\n\r\nSpecial Thanks\r\n--------------\r\n\r\n- [Benjamin Gruenbaum](https://github.com/benjamingr) for helping improve performance.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/knrz/CSV.js.git"
  },
  "scripts": {
    "benchmark": "node benchmark.js",
    "test": "mocha test.js"
  },
  "version": "3.6.2"
}
